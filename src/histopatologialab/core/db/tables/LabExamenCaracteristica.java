/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenCaracteristicaRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenCaracteristica extends TableImpl<LabExamenCaracteristicaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_caracteristica</code>
     */
    public static final LabExamenCaracteristica LAB_EXAMEN_CARACTERISTICA = new LabExamenCaracteristica();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenCaracteristicaRecord> getRecordType() {
        return LabExamenCaracteristicaRecord.class;
    }

    /**
     * The column <code>public.lab_examen_caracteristica.cod_examen</code>.
     */
    public final TableField<LabExamenCaracteristicaRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_examen_caracteristica.codigo_tipo_opcion_lesion</code>.
     */
    public final TableField<LabExamenCaracteristicaRecord, Integer> CODIGO_TIPO_OPCION_LESION = createField(DSL.name("codigo_tipo_opcion_lesion"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lab_examen_caracteristica.fecha_creacion</code>.
     */
    public final TableField<LabExamenCaracteristicaRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_caracteristica.creado_por</code>.
     */
    public final TableField<LabExamenCaracteristicaRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_caracteristica.fecha_modificacion</code>.
     */
    public final TableField<LabExamenCaracteristicaRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_caracteristica.modificado_por</code>.
     */
    public final TableField<LabExamenCaracteristicaRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR(20), this, "");

    private LabExamenCaracteristica(Name alias, Table<LabExamenCaracteristicaRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenCaracteristica(Name alias, Table<LabExamenCaracteristicaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_caracteristica</code> table reference
     */
    public LabExamenCaracteristica(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_CARACTERISTICA);
    }

    /**
     * Create an aliased <code>public.lab_examen_caracteristica</code> table reference
     */
    public LabExamenCaracteristica(Name alias) {
        this(alias, LAB_EXAMEN_CARACTERISTICA);
    }

    /**
     * Create a <code>public.lab_examen_caracteristica</code> table reference
     */
    public LabExamenCaracteristica() {
        this(DSL.name("lab_examen_caracteristica"), null);
    }

    public <O extends Record> LabExamenCaracteristica(Table<O> child, ForeignKey<O, LabExamenCaracteristicaRecord> key) {
        super(child, key, LAB_EXAMEN_CARACTERISTICA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabExamenCaracteristicaRecord, Integer> getIdentity() {
        return (Identity<LabExamenCaracteristicaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabExamenCaracteristicaRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_CARACTERISTICA_PK;
    }

    @Override
    public List<UniqueKey<LabExamenCaracteristicaRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenCaracteristicaRecord>>asList(Keys.LAB_EXAMEN_CARACTERISTICA_PK);
    }

    @Override
    public List<ForeignKey<LabExamenCaracteristicaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenCaracteristicaRecord, ?>>asList(Keys.LAB_EXAMEN_CARACTERISTICA__FK_LAB_EXAMEN_CARACTERISTICA_FK, Keys.LAB_EXAMEN_CARACTERISTICA__FK_LAB_TIPO_OPCION_LESION_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabTipoOpcionLesion _labTipoOpcionLesion;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_CARACTERISTICA__FK_LAB_EXAMEN_CARACTERISTICA_FK);

        return _labExamen;
    }

    public LabTipoOpcionLesion labTipoOpcionLesion() {
        if (_labTipoOpcionLesion == null)
            _labTipoOpcionLesion = new LabTipoOpcionLesion(this, Keys.LAB_EXAMEN_CARACTERISTICA__FK_LAB_TIPO_OPCION_LESION_FK);

        return _labTipoOpcionLesion;
    }

    @Override
    public LabExamenCaracteristica as(String alias) {
        return new LabExamenCaracteristica(DSL.name(alias), this);
    }

    @Override
    public LabExamenCaracteristica as(Name alias) {
        return new LabExamenCaracteristica(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenCaracteristica rename(String name) {
        return new LabExamenCaracteristica(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenCaracteristica rename(Name name) {
        return new LabExamenCaracteristica(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, LocalDate, String, LocalDate, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
