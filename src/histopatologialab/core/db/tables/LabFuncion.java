/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabFuncionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabFuncion extends TableImpl<LabFuncionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_funcion</code>
     */
    public static final LabFuncion LAB_FUNCION = new LabFuncion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabFuncionRecord> getRecordType() {
        return LabFuncionRecord.class;
    }

    /**
     * The column <code>public.lab_funcion.codigo_funcion</code>.
     */
    public final TableField<LabFuncionRecord, Integer> CODIGO_FUNCION = createField(DSL.name("codigo_funcion"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_funcion.funcion_nombre</code>.
     */
    public final TableField<LabFuncionRecord, String> FUNCION_NOMBRE = createField(DSL.name("funcion_nombre"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_funcion.rol_descripcion</code>.
     */
    public final TableField<LabFuncionRecord, String> ROL_DESCRIPCION = createField(DSL.name("rol_descripcion"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_funcion.funcion_estado</code>.
     */
    public final TableField<LabFuncionRecord, String> FUNCION_ESTADO = createField(DSL.name("funcion_estado"), SQLDataType.VARCHAR, this, "");

    private LabFuncion(Name alias, Table<LabFuncionRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabFuncion(Name alias, Table<LabFuncionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_funcion</code> table reference
     */
    public LabFuncion(String alias) {
        this(DSL.name(alias), LAB_FUNCION);
    }

    /**
     * Create an aliased <code>public.lab_funcion</code> table reference
     */
    public LabFuncion(Name alias) {
        this(alias, LAB_FUNCION);
    }

    /**
     * Create a <code>public.lab_funcion</code> table reference
     */
    public LabFuncion() {
        this(DSL.name("lab_funcion"), null);
    }

    public <O extends Record> LabFuncion(Table<O> child, ForeignKey<O, LabFuncionRecord> key) {
        super(child, key, LAB_FUNCION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabFuncionRecord, Integer> getIdentity() {
        return (Identity<LabFuncionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabFuncionRecord> getPrimaryKey() {
        return Keys.LAB_FUNCION_PKEY;
    }

    @Override
    public List<UniqueKey<LabFuncionRecord>> getKeys() {
        return Arrays.<UniqueKey<LabFuncionRecord>>asList(Keys.LAB_FUNCION_PKEY);
    }

    @Override
    public LabFuncion as(String alias) {
        return new LabFuncion(DSL.name(alias), this);
    }

    @Override
    public LabFuncion as(Name alias) {
        return new LabFuncion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabFuncion rename(String name) {
        return new LabFuncion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabFuncion rename(Name name) {
        return new LabFuncion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
