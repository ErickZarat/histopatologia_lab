/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamen extends TableImpl<LabExamenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen</code>
     */
    public static final LabExamen LAB_EXAMEN = new LabExamen();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenRecord> getRecordType() {
        return LabExamenRecord.class;
    }

    /**
     * The column <code>public.lab_examen.cod_examen</code>.
     */
    public final TableField<LabExamenRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('lab_examen_cod_examen_seq2'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.lab_examen.cod_paciente</code>.
     */
    public final TableField<LabExamenRecord, Long> COD_PACIENTE = createField(DSL.name("cod_paciente"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_examen.num_examen</code>.
     */
    public final TableField<LabExamenRecord, String> NUM_EXAMEN = createField(DSL.name("num_examen"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen.fecha_examen</code>.
     */
    public final TableField<LabExamenRecord, LocalDate> FECHA_EXAMEN = createField(DSL.name("fecha_examen"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen.estado_examen</code>.
     */
    public final TableField<LabExamenRecord, String> ESTADO_EXAMEN = createField(DSL.name("estado_examen"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.lab_examen.historia_examen_lesion</code>.
     */
    public final TableField<LabExamenRecord, String> HISTORIA_EXAMEN_LESION = createField(DSL.name("historia_examen_lesion"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.lab_examen.enfermedad_sistemica</code>.
     */
    public final TableField<LabExamenRecord, Integer> ENFERMEDAD_SISTEMICA = createField(DSL.name("enfermedad_sistemica"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen.tamano_lesion</code>.
     */
    public final TableField<LabExamenRecord, String> TAMANO_LESION = createField(DSL.name("tamano_lesion"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.lab_examen.dimensional_lesion</code>.
     */
    public final TableField<LabExamenRecord, String> DIMENSIONAL_LESION = createField(DSL.name("dimensional_lesion"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen.duracion_lesion_dias</code>.
     */
    public final TableField<LabExamenRecord, Integer> DURACION_LESION_DIAS = createField(DSL.name("duracion_lesion_dias"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen.duracion_lesion_meses</code>.
     */
    public final TableField<LabExamenRecord, Integer> DURACION_LESION_MESES = createField(DSL.name("duracion_lesion_meses"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen.duracion_lesion_anios</code>.
     */
    public final TableField<LabExamenRecord, Integer> DURACION_LESION_ANIOS = createField(DSL.name("duracion_lesion_anios"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen.datos_importantes_lesion</code>.
     */
    public final TableField<LabExamenRecord, String> DATOS_IMPORTANTES_LESION = createField(DSL.name("datos_importantes_lesion"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.lab_examen.doctor_examen</code>.
     */
    public final TableField<LabExamenRecord, Long> DOCTOR_EXAMEN = createField(DSL.name("doctor_examen"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_examen.tipo_remision</code>.
     */
    public final TableField<LabExamenRecord, String> TIPO_REMISION = createField(DSL.name("tipo_remision"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen.doctor_remision</code>.
     */
    public final TableField<LabExamenRecord, String> DOCTOR_REMISION = createField(DSL.name("doctor_remision"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.lab_examen.direccion_doctor_remision</code>.
     */
    public final TableField<LabExamenRecord, String> DIRECCION_DOCTOR_REMISION = createField(DSL.name("direccion_doctor_remision"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_examen.telefono_doctor_remision</code>.
     */
    public final TableField<LabExamenRecord, String> TELEFONO_DOCTOR_REMISION = createField(DSL.name("telefono_doctor_remision"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_examen.email_doctor_remision</code>.
     */
    public final TableField<LabExamenRecord, String> EMAIL_DOCTOR_REMISION = createField(DSL.name("email_doctor_remision"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_examen.dependencia_doctor_remision</code>.
     */
    public final TableField<LabExamenRecord, String> DEPENDENCIA_DOCTOR_REMISION = createField(DSL.name("dependencia_doctor_remision"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_examen.registro_doctor_remision</code>.
     */
    public final TableField<LabExamenRecord, String> REGISTRO_DOCTOR_REMISION = createField(DSL.name("registro_doctor_remision"), SQLDataType.VARCHAR(50), this, "");

    private LabExamen(Name alias, Table<LabExamenRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamen(Name alias, Table<LabExamenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen</code> table reference
     */
    public LabExamen(String alias) {
        this(DSL.name(alias), LAB_EXAMEN);
    }

    /**
     * Create an aliased <code>public.lab_examen</code> table reference
     */
    public LabExamen(Name alias) {
        this(alias, LAB_EXAMEN);
    }

    /**
     * Create a <code>public.lab_examen</code> table reference
     */
    public LabExamen() {
        this(DSL.name("lab_examen"), null);
    }

    public <O extends Record> LabExamen(Table<O> child, ForeignKey<O, LabExamenRecord> key) {
        super(child, key, LAB_EXAMEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LabExamenRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_PKEY;
    }

    @Override
    public List<UniqueKey<LabExamenRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenRecord>>asList(Keys.LAB_EXAMEN_PKEY);
    }

    @Override
    public List<ForeignKey<LabExamenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenRecord, ?>>asList(Keys.LAB_EXAMEN__COD_PACIENTE_FK, Keys.LAB_EXAMEN__DOCTOR_EXAMEN_FK);
    }

    private transient LabPaciente _labPaciente;
    private transient LabUsuario _labUsuario;

    public LabPaciente labPaciente() {
        if (_labPaciente == null)
            _labPaciente = new LabPaciente(this, Keys.LAB_EXAMEN__COD_PACIENTE_FK);

        return _labPaciente;
    }

    public LabUsuario labUsuario() {
        if (_labUsuario == null)
            _labUsuario = new LabUsuario(this, Keys.LAB_EXAMEN__DOCTOR_EXAMEN_FK);

        return _labUsuario;
    }

    @Override
    public LabExamen as(String alias) {
        return new LabExamen(DSL.name(alias), this);
    }

    @Override
    public LabExamen as(Name alias) {
        return new LabExamen(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamen rename(String name) {
        return new LabExamen(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamen rename(Name name) {
        return new LabExamen(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Integer, Long, String, LocalDate, String, String, Integer, String, String, Integer, Integer, Integer, String, Long, String, String, String, String, String, String, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
