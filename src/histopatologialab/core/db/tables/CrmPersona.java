/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.CrmPersonaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CrmPersona extends TableImpl<CrmPersonaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.crm_persona</code>
     */
    public static final CrmPersona CRM_PERSONA = new CrmPersona();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CrmPersonaRecord> getRecordType() {
        return CrmPersonaRecord.class;
    }

    /**
     * The column <code>public.crm_persona.pe_persona</code>.
     */
    public final TableField<CrmPersonaRecord, Integer> PE_PERSONA = createField(DSL.name("pe_persona"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.crm_persona.pe_identificacion</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_IDENTIFICACION = createField(DSL.name("pe_identificacion"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.crm_persona.pe_nombre</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_NOMBRE = createField(DSL.name("pe_nombre"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    /**
     * The column <code>public.crm_persona.pe_direccion</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_DIRECCION = createField(DSL.name("pe_direccion"), SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>public.crm_persona.pe_telefono</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_TELEFONO = createField(DSL.name("pe_telefono"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.crm_persona.pe_estadocivil</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_ESTADOCIVIL = createField(DSL.name("pe_estadocivil"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.crm_persona.pe_fechanacimiento</code>.
     */
    public final TableField<CrmPersonaRecord, LocalDateTime> PE_FECHANACIMIENTO = createField(DSL.name("pe_fechanacimiento"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.crm_persona.pe_genero</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_GENERO = createField(DSL.name("pe_genero"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.crm_persona.pe_ocupacion</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_OCUPACION = createField(DSL.name("pe_ocupacion"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.crm_persona.pe_tipo_identificacion</code>.
     */
    public final TableField<CrmPersonaRecord, String> PE_TIPO_IDENTIFICACION = createField(DSL.name("pe_tipo_identificacion"), SQLDataType.VARCHAR(45), this, "");

    private CrmPersona(Name alias, Table<CrmPersonaRecord> aliased) {
        this(alias, aliased, null);
    }

    private CrmPersona(Name alias, Table<CrmPersonaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.crm_persona</code> table reference
     */
    public CrmPersona(String alias) {
        this(DSL.name(alias), CRM_PERSONA);
    }

    /**
     * Create an aliased <code>public.crm_persona</code> table reference
     */
    public CrmPersona(Name alias) {
        this(alias, CRM_PERSONA);
    }

    /**
     * Create a <code>public.crm_persona</code> table reference
     */
    public CrmPersona() {
        this(DSL.name("crm_persona"), null);
    }

    public <O extends Record> CrmPersona(Table<O> child, ForeignKey<O, CrmPersonaRecord> key) {
        super(child, key, CRM_PERSONA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CrmPersonaRecord, Integer> getIdentity() {
        return (Identity<CrmPersonaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CrmPersonaRecord> getPrimaryKey() {
        return Keys.CRM_PERSONA_PKEY;
    }

    @Override
    public List<UniqueKey<CrmPersonaRecord>> getKeys() {
        return Arrays.<UniqueKey<CrmPersonaRecord>>asList(Keys.CRM_PERSONA_PKEY, Keys.CRM_PERSONA_PE_IDENTIFICACION_KEY);
    }

    @Override
    public CrmPersona as(String alias) {
        return new CrmPersona(DSL.name(alias), this);
    }

    @Override
    public CrmPersona as(Name alias) {
        return new CrmPersona(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CrmPersona rename(String name) {
        return new CrmPersona(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CrmPersona rename(Name name) {
        return new CrmPersona(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
