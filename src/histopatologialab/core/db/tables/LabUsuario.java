/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabUsuarioRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabUsuario extends TableImpl<LabUsuarioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_usuario</code>
     */
    public static final LabUsuario LAB_USUARIO = new LabUsuario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabUsuarioRecord> getRecordType() {
        return LabUsuarioRecord.class;
    }

    /**
     * The column <code>public.lab_usuario.cod_usuario</code>.
     */
    public final TableField<LabUsuarioRecord, Long> COD_USUARIO = createField(DSL.name("cod_usuario"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_usuario.login_usuario</code>.
     */
    public final TableField<LabUsuarioRecord, String> LOGIN_USUARIO = createField(DSL.name("login_usuario"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_usuario.nombres_doctor</code>.
     */
    public final TableField<LabUsuarioRecord, String> NOMBRES_DOCTOR = createField(DSL.name("nombres_doctor"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_usuario.apellidos_doctor</code>.
     */
    public final TableField<LabUsuarioRecord, String> APELLIDOS_DOCTOR = createField(DSL.name("apellidos_doctor"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_usuario.num_colegiado</code>.
     */
    public final TableField<LabUsuarioRecord, String> NUM_COLEGIADO = createField(DSL.name("num_colegiado"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_usuario.password</code>.
     */
    public final TableField<LabUsuarioRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_usuario.estado</code>.
     */
    public final TableField<LabUsuarioRecord, String> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_usuario.emailusuario</code>.
     */
    public final TableField<LabUsuarioRecord, String> EMAILUSUARIO = createField(DSL.name("emailusuario"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_usuario.creadopor</code>.
     */
    public final TableField<LabUsuarioRecord, String> CREADOPOR = createField(DSL.name("creadopor"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.lab_usuario.fechacreacion</code>.
     */
    public final TableField<LabUsuarioRecord, LocalDate> FECHACREACION = createField(DSL.name("fechacreacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_usuario.fechamodificacion</code>.
     */
    public final TableField<LabUsuarioRecord, LocalDate> FECHAMODIFICACION = createField(DSL.name("fechamodificacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_usuario.modificadopor</code>.
     */
    public final TableField<LabUsuarioRecord, String> MODIFICADOPOR = createField(DSL.name("modificadopor"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.lab_usuario.tipo_usuario</code>.
     */
    public final TableField<LabUsuarioRecord, String> TIPO_USUARIO = createField(DSL.name("tipo_usuario"), SQLDataType.VARCHAR, this, "");

    private LabUsuario(Name alias, Table<LabUsuarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabUsuario(Name alias, Table<LabUsuarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_usuario</code> table reference
     */
    public LabUsuario(String alias) {
        this(DSL.name(alias), LAB_USUARIO);
    }

    /**
     * Create an aliased <code>public.lab_usuario</code> table reference
     */
    public LabUsuario(Name alias) {
        this(alias, LAB_USUARIO);
    }

    /**
     * Create a <code>public.lab_usuario</code> table reference
     */
    public LabUsuario() {
        this(DSL.name("lab_usuario"), null);
    }

    public <O extends Record> LabUsuario(Table<O> child, ForeignKey<O, LabUsuarioRecord> key) {
        super(child, key, LAB_USUARIO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabUsuarioRecord, Long> getIdentity() {
        return (Identity<LabUsuarioRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabUsuarioRecord> getPrimaryKey() {
        return Keys.LAB_USUARIO_PKEY;
    }

    @Override
    public List<UniqueKey<LabUsuarioRecord>> getKeys() {
        return Arrays.<UniqueKey<LabUsuarioRecord>>asList(Keys.LAB_USUARIO_PKEY, Keys.LAB_USUARIO_LOGIN_USUARIO_KEY);
    }

    @Override
    public LabUsuario as(String alias) {
        return new LabUsuario(DSL.name(alias), this);
    }

    @Override
    public LabUsuario as(Name alias) {
        return new LabUsuario(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabUsuario rename(String name) {
        return new LabUsuario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabUsuario rename(Name name) {
        return new LabUsuario(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, String, String, String, String, String, LocalDate, LocalDate, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
