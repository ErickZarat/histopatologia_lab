/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabRepcitasxfechaRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabRepcitasxfecha extends TableImpl<LabRepcitasxfechaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_repcitasxfecha</code>
     */
    public static final LabRepcitasxfecha LAB_REPCITASXFECHA = new LabRepcitasxfecha();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabRepcitasxfechaRecord> getRecordType() {
        return LabRepcitasxfechaRecord.class;
    }

    /**
     * The column <code>public.lab_repcitasxfecha.cod_examen</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.fec_examen</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> FEC_EXAMEN = createField(DSL.name("fec_examen"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.num_examen</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> NUM_EXAMEN = createField(DSL.name("num_examen"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.fecha_examen</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, LocalDate> FECHA_EXAMEN = createField(DSL.name("fecha_examen"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.nombre_paciente</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> NOMBRE_PACIENTE = createField(DSL.name("nombre_paciente"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.tipo_identificacion</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> TIPO_IDENTIFICACION = createField(DSL.name("tipo_identificacion"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.identificacion</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> IDENTIFICACION = createField(DSL.name("identificacion"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.ocupacion</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> OCUPACION = createField(DSL.name("ocupacion"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.numero_ficha</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> NUMERO_FICHA = createField(DSL.name("numero_ficha"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.diagnosticos_diferenciales</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> DIAGNOSTICOS_DIFERENCIALES = createField(DSL.name("diagnosticos_diferenciales"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.req_biopsia</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> REQ_BIOPSIA = createField(DSL.name("req_biopsia"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.req_frote</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> REQ_FROTE = createField(DSL.name("req_frote"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lab_repcitasxfecha.estado_examen</code>.
     */
    public final TableField<LabRepcitasxfechaRecord, String> ESTADO_EXAMEN = createField(DSL.name("estado_examen"), SQLDataType.VARCHAR, this, "");

    private LabRepcitasxfecha(Name alias, Table<LabRepcitasxfechaRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private LabRepcitasxfecha(Name alias, Table<LabRepcitasxfechaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.lab_repcitasxfecha</code> table reference
     */
    public LabRepcitasxfecha(String alias) {
        this(DSL.name(alias), LAB_REPCITASXFECHA);
    }

    /**
     * Create an aliased <code>public.lab_repcitasxfecha</code> table reference
     */
    public LabRepcitasxfecha(Name alias) {
        this(alias, LAB_REPCITASXFECHA);
    }

    /**
     * Create a <code>public.lab_repcitasxfecha</code> table reference
     */
    public LabRepcitasxfecha() {
        this(DSL.name("lab_repcitasxfecha"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public LabRepcitasxfecha as(String alias) {
        return new LabRepcitasxfecha(DSL.name(alias), this, parameters);
    }

    @Override
    public LabRepcitasxfecha as(Name alias) {
        return new LabRepcitasxfecha(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRepcitasxfecha rename(String name) {
        return new LabRepcitasxfecha(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRepcitasxfecha rename(Name name) {
        return new LabRepcitasxfecha(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, LocalDate, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public LabRepcitasxfecha call(
          LocalDate fechainicio
        , LocalDate fechafin
    ) {
        LabRepcitasxfecha result = new LabRepcitasxfecha(DSL.name("lab_repcitasxfecha"), null, new Field[] {
              DSL.val(fechainicio, SQLDataType.LOCALDATE)
            , DSL.val(fechafin, SQLDataType.LOCALDATE)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public LabRepcitasxfecha call(
          Field<LocalDate> fechainicio
        , Field<LocalDate> fechafin
    ) {
        LabRepcitasxfecha result = new LabRepcitasxfecha(DSL.name("lab_repcitasxfecha"), null, new Field[] {
              fechainicio
            , fechafin
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
