/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenEnfermedadSistematicaRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenEnfermedadSistematica extends TableImpl<LabExamenEnfermedadSistematicaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_enfermedad_sistematica</code>
     */
    public static final LabExamenEnfermedadSistematica LAB_EXAMEN_ENFERMEDAD_SISTEMATICA = new LabExamenEnfermedadSistematica();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenEnfermedadSistematicaRecord> getRecordType() {
        return LabExamenEnfermedadSistematicaRecord.class;
    }

    /**
     * The column <code>public.lab_examen_enfermedad_sistematica.cod_examen</code>.
     */
    public final TableField<LabExamenEnfermedadSistematicaRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lab_examen_enfermedad_sistematica.cod_enfermedad_sistematica</code>.
     */
    public final TableField<LabExamenEnfermedadSistematicaRecord, Integer> COD_ENFERMEDAD_SISTEMATICA = createField(DSL.name("cod_enfermedad_sistematica"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lab_examen_enfermedad_sistematica.fecha_creacion</code>.
     */
    public final TableField<LabExamenEnfermedadSistematicaRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_enfermedad_sistematica.creado_por</code>.
     */
    public final TableField<LabExamenEnfermedadSistematicaRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_enfermedad_sistematica.fecha_modificacion</code>.
     */
    public final TableField<LabExamenEnfermedadSistematicaRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_enfermedad_sistematica.modificado_por</code>.
     */
    public final TableField<LabExamenEnfermedadSistematicaRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR(20), this, "");

    private LabExamenEnfermedadSistematica(Name alias, Table<LabExamenEnfermedadSistematicaRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenEnfermedadSistematica(Name alias, Table<LabExamenEnfermedadSistematicaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_enfermedad_sistematica</code> table reference
     */
    public LabExamenEnfermedadSistematica(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_ENFERMEDAD_SISTEMATICA);
    }

    /**
     * Create an aliased <code>public.lab_examen_enfermedad_sistematica</code> table reference
     */
    public LabExamenEnfermedadSistematica(Name alias) {
        this(alias, LAB_EXAMEN_ENFERMEDAD_SISTEMATICA);
    }

    /**
     * Create a <code>public.lab_examen_enfermedad_sistematica</code> table reference
     */
    public LabExamenEnfermedadSistematica() {
        this(DSL.name("lab_examen_enfermedad_sistematica"), null);
    }

    public <O extends Record> LabExamenEnfermedadSistematica(Table<O> child, ForeignKey<O, LabExamenEnfermedadSistematicaRecord> key) {
        super(child, key, LAB_EXAMEN_ENFERMEDAD_SISTEMATICA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LabExamenEnfermedadSistematicaRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_ENFERMEDAD_SISTEMATICA_PK;
    }

    @Override
    public List<UniqueKey<LabExamenEnfermedadSistematicaRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenEnfermedadSistematicaRecord>>asList(Keys.LAB_EXAMEN_ENFERMEDAD_SISTEMATICA_PK);
    }

    @Override
    public List<ForeignKey<LabExamenEnfermedadSistematicaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenEnfermedadSistematicaRecord, ?>>asList(Keys.LAB_EXAMEN_ENFERMEDAD_SISTEMATICA__COD_EXAMEN_FK, Keys.LAB_EXAMEN_ENFERMEDAD_SISTEMATICA__COD_ENFERMEDAD_SISTEMATICA_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabEnfermedadSistemica _labEnfermedadSistemica;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_ENFERMEDAD_SISTEMATICA__COD_EXAMEN_FK);

        return _labExamen;
    }

    public LabEnfermedadSistemica labEnfermedadSistemica() {
        if (_labEnfermedadSistemica == null)
            _labEnfermedadSistemica = new LabEnfermedadSistemica(this, Keys.LAB_EXAMEN_ENFERMEDAD_SISTEMATICA__COD_ENFERMEDAD_SISTEMATICA_FK);

        return _labEnfermedadSistemica;
    }

    @Override
    public LabExamenEnfermedadSistematica as(String alias) {
        return new LabExamenEnfermedadSistematica(DSL.name(alias), this);
    }

    @Override
    public LabExamenEnfermedadSistematica as(Name alias) {
        return new LabExamenEnfermedadSistematica(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenEnfermedadSistematica rename(String name) {
        return new LabExamenEnfermedadSistematica(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenEnfermedadSistematica rename(Name name) {
        return new LabExamenEnfermedadSistematica(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, LocalDate, String, LocalDate, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
