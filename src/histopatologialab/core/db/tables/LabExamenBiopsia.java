/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenBiopsiaRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenBiopsia extends TableImpl<LabExamenBiopsiaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_biopsia</code>
     */
    public static final LabExamenBiopsia LAB_EXAMEN_BIOPSIA = new LabExamenBiopsia();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenBiopsiaRecord> getRecordType() {
        return LabExamenBiopsiaRecord.class;
    }

    /**
     * The column <code>public.lab_examen_biopsia.cod_biopsia</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, Integer> COD_BIOPSIA = createField(DSL.name("cod_biopsia"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.cod_examen</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.num_biopsia</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> NUM_BIOPSIA = createField(DSL.name("num_biopsia"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.usuario_biopsia</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, Integer> USUARIO_BIOPSIA = createField(DSL.name("usuario_biopsia"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.fecha</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, LocalDate> FECHA = createField(DSL.name("fecha"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.tipo_biopsia</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> TIPO_BIOPSIA = createField(DSL.name("tipo_biopsia"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.num_recibo</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> NUM_RECIBO = createField(DSL.name("num_recibo"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.serie_recibo</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> SERIE_RECIBO = createField(DSL.name("serie_recibo"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.monto_recibo</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, BigDecimal> MONTO_RECIBO = createField(DSL.name("monto_recibo"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.estado_biopsia</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> ESTADO_BIOPSIA = createField(DSL.name("estado_biopsia"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.modificado_por</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.lab_examen_biopsia.fecha_modificacion</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.procedimiento</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, Integer> PROCEDIMIENTO = createField(DSL.name("procedimiento"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.tipo_cirugia</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, Integer> TIPO_CIRUGIA = createField(DSL.name("tipo_cirugia"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.instrumento</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, Integer> INSTRUMENTO = createField(DSL.name("instrumento"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.muestra_estudio</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> MUESTRA_ESTUDIO = createField(DSL.name("muestra_estudio"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_biopsia.observaciones</code>.
     */
    public final TableField<LabExamenBiopsiaRecord, String> OBSERVACIONES = createField(DSL.name("observaciones"), SQLDataType.VARCHAR, this, "");

    private LabExamenBiopsia(Name alias, Table<LabExamenBiopsiaRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenBiopsia(Name alias, Table<LabExamenBiopsiaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_biopsia</code> table reference
     */
    public LabExamenBiopsia(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_BIOPSIA);
    }

    /**
     * Create an aliased <code>public.lab_examen_biopsia</code> table reference
     */
    public LabExamenBiopsia(Name alias) {
        this(alias, LAB_EXAMEN_BIOPSIA);
    }

    /**
     * Create a <code>public.lab_examen_biopsia</code> table reference
     */
    public LabExamenBiopsia() {
        this(DSL.name("lab_examen_biopsia"), null);
    }

    public <O extends Record> LabExamenBiopsia(Table<O> child, ForeignKey<O, LabExamenBiopsiaRecord> key) {
        super(child, key, LAB_EXAMEN_BIOPSIA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabExamenBiopsiaRecord, Integer> getIdentity() {
        return (Identity<LabExamenBiopsiaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabExamenBiopsiaRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_BIOPSIA_PKEY;
    }

    @Override
    public List<UniqueKey<LabExamenBiopsiaRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenBiopsiaRecord>>asList(Keys.LAB_EXAMEN_BIOPSIA_PKEY, Keys.NUM_BIOPSIA_UQ);
    }

    @Override
    public List<ForeignKey<LabExamenBiopsiaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenBiopsiaRecord, ?>>asList(Keys.LAB_EXAMEN_BIOPSIA__COD_EXAMEN_FK, Keys.LAB_EXAMEN_BIOPSIA__USUARIO_BIOPSIA_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabUsuario _labUsuario;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_BIOPSIA__COD_EXAMEN_FK);

        return _labExamen;
    }

    public LabUsuario labUsuario() {
        if (_labUsuario == null)
            _labUsuario = new LabUsuario(this, Keys.LAB_EXAMEN_BIOPSIA__USUARIO_BIOPSIA_FK);

        return _labUsuario;
    }

    @Override
    public LabExamenBiopsia as(String alias) {
        return new LabExamenBiopsia(DSL.name(alias), this);
    }

    @Override
    public LabExamenBiopsia as(Name alias) {
        return new LabExamenBiopsia(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenBiopsia rename(String name) {
        return new LabExamenBiopsia(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenBiopsia rename(Name name) {
        return new LabExamenBiopsia(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, Integer, String, Integer, LocalDate, String, String, String, BigDecimal, String, String, LocalDate, Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
