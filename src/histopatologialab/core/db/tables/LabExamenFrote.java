/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenFroteRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenFrote extends TableImpl<LabExamenFroteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_frote</code>
     */
    public static final LabExamenFrote LAB_EXAMEN_FROTE = new LabExamenFrote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenFroteRecord> getRecordType() {
        return LabExamenFroteRecord.class;
    }

    /**
     * The column <code>public.lab_examen_frote.cod_frote</code>.
     */
    public final TableField<LabExamenFroteRecord, Integer> COD_FROTE = createField(DSL.name("cod_frote"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_examen_frote.cod_examen</code>.
     */
    public final TableField<LabExamenFroteRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_frote.num_frote</code>.
     */
    public final TableField<LabExamenFroteRecord, String> NUM_FROTE = createField(DSL.name("num_frote"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.lab_examen_frote.num_recibo</code>.
     */
    public final TableField<LabExamenFroteRecord, String> NUM_RECIBO = createField(DSL.name("num_recibo"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_frote.serie_recibo</code>.
     */
    public final TableField<LabExamenFroteRecord, String> SERIE_RECIBO = createField(DSL.name("serie_recibo"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_frote.monto_recibo</code>.
     */
    public final TableField<LabExamenFroteRecord, String> MONTO_RECIBO = createField(DSL.name("monto_recibo"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_frote.cod_tincion</code>.
     */
    public final TableField<LabExamenFroteRecord, Integer> COD_TINCION = createField(DSL.name("cod_tincion"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_frote.estado_frote</code>.
     */
    public final TableField<LabExamenFroteRecord, String> ESTADO_FROTE = createField(DSL.name("estado_frote"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_frote.usuario_frote</code>.
     */
    public final TableField<LabExamenFroteRecord, Integer> USUARIO_FROTE = createField(DSL.name("usuario_frote"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_frote.modificado_por</code>.
     */
    public final TableField<LabExamenFroteRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_frote.fecha_modificacion</code>.
     */
    public final TableField<LabExamenFroteRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    private LabExamenFrote(Name alias, Table<LabExamenFroteRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenFrote(Name alias, Table<LabExamenFroteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_frote</code> table reference
     */
    public LabExamenFrote(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_FROTE);
    }

    /**
     * Create an aliased <code>public.lab_examen_frote</code> table reference
     */
    public LabExamenFrote(Name alias) {
        this(alias, LAB_EXAMEN_FROTE);
    }

    /**
     * Create a <code>public.lab_examen_frote</code> table reference
     */
    public LabExamenFrote() {
        this(DSL.name("lab_examen_frote"), null);
    }

    public <O extends Record> LabExamenFrote(Table<O> child, ForeignKey<O, LabExamenFroteRecord> key) {
        super(child, key, LAB_EXAMEN_FROTE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabExamenFroteRecord, Integer> getIdentity() {
        return (Identity<LabExamenFroteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabExamenFroteRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_FROTE_PKEY;
    }

    @Override
    public List<UniqueKey<LabExamenFroteRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenFroteRecord>>asList(Keys.LAB_EXAMEN_FROTE_PKEY, Keys.NUM_FROTE_UQ);
    }

    @Override
    public List<ForeignKey<LabExamenFroteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenFroteRecord, ?>>asList(Keys.LAB_EXAMEN_FROTE__COD_EXAMEN_FK, Keys.LAB_EXAMEN_FROTE__COD_TINCION_FK, Keys.LAB_EXAMEN_FROTE__FROTE_USUARIO_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabTincion _labTincion;
    private transient LabUsuario _labUsuario;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_FROTE__COD_EXAMEN_FK);

        return _labExamen;
    }

    public LabTincion labTincion() {
        if (_labTincion == null)
            _labTincion = new LabTincion(this, Keys.LAB_EXAMEN_FROTE__COD_TINCION_FK);

        return _labTincion;
    }

    public LabUsuario labUsuario() {
        if (_labUsuario == null)
            _labUsuario = new LabUsuario(this, Keys.LAB_EXAMEN_FROTE__FROTE_USUARIO_FK);

        return _labUsuario;
    }

    @Override
    public LabExamenFrote as(String alias) {
        return new LabExamenFrote(DSL.name(alias), this);
    }

    @Override
    public LabExamenFrote as(Name alias) {
        return new LabExamenFrote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenFrote rename(String name) {
        return new LabExamenFrote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenFrote rename(Name name) {
        return new LabExamenFrote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, String, String, String, Integer, String, Integer, String, LocalDate> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
