/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenImagenRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenImagen extends TableImpl<LabExamenImagenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_imagen</code>
     */
    public static final LabExamenImagen LAB_EXAMEN_IMAGEN = new LabExamenImagen();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenImagenRecord> getRecordType() {
        return LabExamenImagenRecord.class;
    }

    /**
     * The column <code>public.lab_examen_imagen.cod_examen</code>.
     */
    public final TableField<LabExamenImagenRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_imagen.num_frote</code>.
     */
    public final TableField<LabExamenImagenRecord, String> NUM_FROTE = createField(DSL.name("num_frote"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_imagen.num_biopsia</code>.
     */
    public final TableField<LabExamenImagenRecord, String> NUM_BIOPSIA = createField(DSL.name("num_biopsia"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_examen_imagen.num_imagen</code>.
     */
    public final TableField<LabExamenImagenRecord, Integer> NUM_IMAGEN = createField(DSL.name("num_imagen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_imagen.ruta_imagen</code>.
     */
    public final TableField<LabExamenImagenRecord, String> RUTA_IMAGEN = createField(DSL.name("ruta_imagen"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_imagen.nombre_imagen</code>.
     */
    public final TableField<LabExamenImagenRecord, String> NOMBRE_IMAGEN = createField(DSL.name("nombre_imagen"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_imagen.fecha_creacion</code>.
     */
    public final TableField<LabExamenImagenRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_imagen.creado_por</code>.
     */
    public final TableField<LabExamenImagenRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_imagen.modificado_por</code>.
     */
    public final TableField<LabExamenImagenRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_imagen.fecha_modificacion</code>.
     */
    public final TableField<LabExamenImagenRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    private LabExamenImagen(Name alias, Table<LabExamenImagenRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenImagen(Name alias, Table<LabExamenImagenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_imagen</code> table reference
     */
    public LabExamenImagen(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_IMAGEN);
    }

    /**
     * Create an aliased <code>public.lab_examen_imagen</code> table reference
     */
    public LabExamenImagen(Name alias) {
        this(alias, LAB_EXAMEN_IMAGEN);
    }

    /**
     * Create a <code>public.lab_examen_imagen</code> table reference
     */
    public LabExamenImagen() {
        this(DSL.name("lab_examen_imagen"), null);
    }

    public <O extends Record> LabExamenImagen(Table<O> child, ForeignKey<O, LabExamenImagenRecord> key) {
        super(child, key, LAB_EXAMEN_IMAGEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<LabExamenImagenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenImagenRecord, ?>>asList(Keys.LAB_EXAMEN_IMAGEN__IMAGEN_EXAMEN_FK);
    }

    private transient LabExamen _labExamen;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_IMAGEN__IMAGEN_EXAMEN_FK);

        return _labExamen;
    }

    @Override
    public LabExamenImagen as(String alias) {
        return new LabExamenImagen(DSL.name(alias), this);
    }

    @Override
    public LabExamenImagen as(Name alias) {
        return new LabExamenImagen(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenImagen rename(String name) {
        return new LabExamenImagen(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenImagen rename(Name name) {
        return new LabExamenImagen(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, String, String, LocalDate, String, String, LocalDate> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
