/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabInformeRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabInforme extends TableImpl<LabInformeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_informe</code>
     */
    public static final LabInforme LAB_INFORME = new LabInforme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabInformeRecord> getRecordType() {
        return LabInformeRecord.class;
    }

    /**
     * The column <code>public.lab_informe.cod_informe</code>.
     */
    public final TableField<LabInformeRecord, Integer> COD_INFORME = createField(DSL.name("cod_informe"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_informe.fecha_informe</code>.
     */
    public final TableField<LabInformeRecord, LocalDate> FECHA_INFORME = createField(DSL.name("fecha_informe"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_informe.clinica</code>.
     */
    public final TableField<LabInformeRecord, String> CLINICA = createField(DSL.name("clinica"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.direccion</code>.
     */
    public final TableField<LabInformeRecord, String> DIRECCION = createField(DSL.name("direccion"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.solicitante</code>.
     */
    public final TableField<LabInformeRecord, String> SOLICITANTE = createField(DSL.name("solicitante"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.datos_clinicos</code>.
     */
    public final TableField<LabInformeRecord, String> DATOS_CLINICOS = createField(DSL.name("datos_clinicos"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.desc_macros</code>.
     */
    public final TableField<LabInformeRecord, String> DESC_MACROS = createField(DSL.name("desc_macros"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.desc_mirco</code>.
     */
    public final TableField<LabInformeRecord, String> DESC_MIRCO = createField(DSL.name("desc_mirco"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.diagnostico</code>.
     */
    public final TableField<LabInformeRecord, String> DIAGNOSTICO = createField(DSL.name("diagnostico"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_informe.usuario_informe</code>.
     */
    public final TableField<LabInformeRecord, Integer> USUARIO_INFORME = createField(DSL.name("usuario_informe"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_informe.cod_frote</code>.
     */
    public final TableField<LabInformeRecord, Integer> COD_FROTE = createField(DSL.name("cod_frote"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_informe.cod_biopsia</code>.
     */
    public final TableField<LabInformeRecord, Integer> COD_BIOPSIA = createField(DSL.name("cod_biopsia"), SQLDataType.INTEGER, this, "");

    private LabInforme(Name alias, Table<LabInformeRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabInforme(Name alias, Table<LabInformeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_informe</code> table reference
     */
    public LabInforme(String alias) {
        this(DSL.name(alias), LAB_INFORME);
    }

    /**
     * Create an aliased <code>public.lab_informe</code> table reference
     */
    public LabInforme(Name alias) {
        this(alias, LAB_INFORME);
    }

    /**
     * Create a <code>public.lab_informe</code> table reference
     */
    public LabInforme() {
        this(DSL.name("lab_informe"), null);
    }

    public <O extends Record> LabInforme(Table<O> child, ForeignKey<O, LabInformeRecord> key) {
        super(child, key, LAB_INFORME);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabInformeRecord, Integer> getIdentity() {
        return (Identity<LabInformeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabInformeRecord> getPrimaryKey() {
        return Keys.LAB_INFORME_PKEY;
    }

    @Override
    public List<UniqueKey<LabInformeRecord>> getKeys() {
        return Arrays.<UniqueKey<LabInformeRecord>>asList(Keys.LAB_INFORME_PKEY);
    }

    @Override
    public List<ForeignKey<LabInformeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabInformeRecord, ?>>asList(Keys.LAB_INFORME__USUARIO_INFORME_FK, Keys.LAB_INFORME__FROTE_INFORME_FK, Keys.LAB_INFORME__BIOPSIA_INFORME_FK);
    }

    private transient LabUsuario _labUsuario;
    private transient LabExamenFrote _labExamenFrote;
    private transient LabExamenBiopsia _labExamenBiopsia;

    public LabUsuario labUsuario() {
        if (_labUsuario == null)
            _labUsuario = new LabUsuario(this, Keys.LAB_INFORME__USUARIO_INFORME_FK);

        return _labUsuario;
    }

    public LabExamenFrote labExamenFrote() {
        if (_labExamenFrote == null)
            _labExamenFrote = new LabExamenFrote(this, Keys.LAB_INFORME__FROTE_INFORME_FK);

        return _labExamenFrote;
    }

    public LabExamenBiopsia labExamenBiopsia() {
        if (_labExamenBiopsia == null)
            _labExamenBiopsia = new LabExamenBiopsia(this, Keys.LAB_INFORME__BIOPSIA_INFORME_FK);

        return _labExamenBiopsia;
    }

    @Override
    public LabInforme as(String alias) {
        return new LabInforme(DSL.name(alias), this);
    }

    @Override
    public LabInforme as(Name alias) {
        return new LabInforme(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabInforme rename(String name) {
        return new LabInforme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabInforme rename(Name name) {
        return new LabInforme(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, LocalDate, String, String, String, String, String, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
