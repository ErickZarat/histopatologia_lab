/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenSeguimientoRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenSeguimiento extends TableImpl<LabExamenSeguimientoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_seguimiento</code>
     */
    public static final LabExamenSeguimiento LAB_EXAMEN_SEGUIMIENTO = new LabExamenSeguimiento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenSeguimientoRecord> getRecordType() {
        return LabExamenSeguimientoRecord.class;
    }

    /**
     * The column <code>public.lab_examen_seguimiento.cod_seguimiento</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, Integer> COD_SEGUIMIENTO = createField(DSL.name("cod_seguimiento"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.cod_examen</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.fecha_seguimiento</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, LocalDate> FECHA_SEGUIMIENTO = createField(DSL.name("fecha_seguimiento"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.observaciones</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, String> OBSERVACIONES = createField(DSL.name("observaciones"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.observaciones_adicional</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, String> OBSERVACIONES_ADICIONAL = createField(DSL.name("observaciones_adicional"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.usuario_seguimiento</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, Long> USUARIO_SEGUIMIENTO = createField(DSL.name("usuario_seguimiento"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.modificado_por</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, Long> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_examen_seguimiento.fecha_modificacion</code>.
     */
    public final TableField<LabExamenSeguimientoRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    private LabExamenSeguimiento(Name alias, Table<LabExamenSeguimientoRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenSeguimiento(Name alias, Table<LabExamenSeguimientoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_seguimiento</code> table reference
     */
    public LabExamenSeguimiento(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_SEGUIMIENTO);
    }

    /**
     * Create an aliased <code>public.lab_examen_seguimiento</code> table reference
     */
    public LabExamenSeguimiento(Name alias) {
        this(alias, LAB_EXAMEN_SEGUIMIENTO);
    }

    /**
     * Create a <code>public.lab_examen_seguimiento</code> table reference
     */
    public LabExamenSeguimiento() {
        this(DSL.name("lab_examen_seguimiento"), null);
    }

    public <O extends Record> LabExamenSeguimiento(Table<O> child, ForeignKey<O, LabExamenSeguimientoRecord> key) {
        super(child, key, LAB_EXAMEN_SEGUIMIENTO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabExamenSeguimientoRecord, Integer> getIdentity() {
        return (Identity<LabExamenSeguimientoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabExamenSeguimientoRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_SEGUIMIENTO_PKEY;
    }

    @Override
    public List<UniqueKey<LabExamenSeguimientoRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenSeguimientoRecord>>asList(Keys.LAB_EXAMEN_SEGUIMIENTO_PKEY);
    }

    @Override
    public List<ForeignKey<LabExamenSeguimientoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenSeguimientoRecord, ?>>asList(Keys.LAB_EXAMEN_SEGUIMIENTO__LAB_EXAMEN_SEGUIMIENTO_FK, Keys.LAB_EXAMEN_SEGUIMIENTO__USUARIO_SEGUIMIENTO_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabUsuario _labUsuario;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_SEGUIMIENTO__LAB_EXAMEN_SEGUIMIENTO_FK);

        return _labExamen;
    }

    public LabUsuario labUsuario() {
        if (_labUsuario == null)
            _labUsuario = new LabUsuario(this, Keys.LAB_EXAMEN_SEGUIMIENTO__USUARIO_SEGUIMIENTO_FK);

        return _labUsuario;
    }

    @Override
    public LabExamenSeguimiento as(String alias) {
        return new LabExamenSeguimiento(DSL.name(alias), this);
    }

    @Override
    public LabExamenSeguimiento as(Name alias) {
        return new LabExamenSeguimiento(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenSeguimiento rename(String name) {
        return new LabExamenSeguimiento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenSeguimiento rename(Name name) {
        return new LabExamenSeguimiento(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, LocalDate, String, String, Long, Long, LocalDate> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
