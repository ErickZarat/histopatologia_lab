/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenRecetaRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenReceta extends TableImpl<LabExamenRecetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_receta</code>
     */
    public static final LabExamenReceta LAB_EXAMEN_RECETA = new LabExamenReceta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenRecetaRecord> getRecordType() {
        return LabExamenRecetaRecord.class;
    }

    /**
     * The column <code>public.lab_examen_receta.cod_receta</code>.
     */
    public final TableField<LabExamenRecetaRecord, Integer> COD_RECETA = createField(DSL.name("cod_receta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lab_examen_receta.cod_examen</code>.
     */
    public final TableField<LabExamenRecetaRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_receta.cod_presentacion_medicamento</code>.
     */
    public final TableField<LabExamenRecetaRecord, Integer> COD_PRESENTACION_MEDICAMENTO = createField(DSL.name("cod_presentacion_medicamento"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_receta.num_receta</code>.
     */
    public final TableField<LabExamenRecetaRecord, Integer> NUM_RECETA = createField(DSL.name("num_receta"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_receta.notas</code>.
     */
    public final TableField<LabExamenRecetaRecord, String> NOTAS = createField(DSL.name("notas"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_receta.creado_por</code>.
     */
    public final TableField<LabExamenRecetaRecord, Long> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_examen_receta.fecha_creacion</code>.
     */
    public final TableField<LabExamenRecetaRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_receta.modificado_por</code>.
     */
    public final TableField<LabExamenRecetaRecord, Long> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lab_examen_receta.fecha_modificacion</code>.
     */
    public final TableField<LabExamenRecetaRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    private LabExamenReceta(Name alias, Table<LabExamenRecetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenReceta(Name alias, Table<LabExamenRecetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_receta</code> table reference
     */
    public LabExamenReceta(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_RECETA);
    }

    /**
     * Create an aliased <code>public.lab_examen_receta</code> table reference
     */
    public LabExamenReceta(Name alias) {
        this(alias, LAB_EXAMEN_RECETA);
    }

    /**
     * Create a <code>public.lab_examen_receta</code> table reference
     */
    public LabExamenReceta() {
        this(DSL.name("lab_examen_receta"), null);
    }

    public <O extends Record> LabExamenReceta(Table<O> child, ForeignKey<O, LabExamenRecetaRecord> key) {
        super(child, key, LAB_EXAMEN_RECETA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LabExamenRecetaRecord> getPrimaryKey() {
        return Keys.LAB_EXAMEN_RECETA_PK;
    }

    @Override
    public List<UniqueKey<LabExamenRecetaRecord>> getKeys() {
        return Arrays.<UniqueKey<LabExamenRecetaRecord>>asList(Keys.LAB_EXAMEN_RECETA_PK);
    }

    @Override
    public List<ForeignKey<LabExamenRecetaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenRecetaRecord, ?>>asList(Keys.LAB_EXAMEN_RECETA__LAB_EXAMEN_RECETA_LAB_EXAMEN_COD_EXAMEN_FK, Keys.LAB_EXAMEN_RECETA__LAB_EXAMEN_RECETA_TIPO_PRESENTACION_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabPresentacionMedicamento _labPresentacionMedicamento;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_RECETA__LAB_EXAMEN_RECETA_LAB_EXAMEN_COD_EXAMEN_FK);

        return _labExamen;
    }

    public LabPresentacionMedicamento labPresentacionMedicamento() {
        if (_labPresentacionMedicamento == null)
            _labPresentacionMedicamento = new LabPresentacionMedicamento(this, Keys.LAB_EXAMEN_RECETA__LAB_EXAMEN_RECETA_TIPO_PRESENTACION_FK);

        return _labPresentacionMedicamento;
    }

    @Override
    public LabExamenReceta as(String alias) {
        return new LabExamenReceta(DSL.name(alias), this);
    }

    @Override
    public LabExamenReceta as(Name alias) {
        return new LabExamenReceta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenReceta rename(String name) {
        return new LabExamenReceta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenReceta rename(Name name) {
        return new LabExamenReceta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, Integer, String, Long, LocalDate, Long, LocalDate> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
