/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabExamenHistEstadosRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabExamenHistEstados extends TableImpl<LabExamenHistEstadosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_examen_hist_estados</code>
     */
    public static final LabExamenHistEstados LAB_EXAMEN_HIST_ESTADOS = new LabExamenHistEstados();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabExamenHistEstadosRecord> getRecordType() {
        return LabExamenHistEstadosRecord.class;
    }

    /**
     * The column <code>public.lab_examen_hist_estados.cod_examen</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, Integer> COD_EXAMEN = createField(DSL.name("cod_examen"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.cod_frote</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, Integer> COD_FROTE = createField(DSL.name("cod_frote"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.cod_biopsia</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, Integer> COD_BIOPSIA = createField(DSL.name("cod_biopsia"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.estado</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, String> ESTADO = createField(DSL.name("estado"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.fecha_creacion</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.creado_por</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.modificado_por</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.lab_examen_hist_estados.fecha_modificacion</code>.
     */
    public final TableField<LabExamenHistEstadosRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    private LabExamenHistEstados(Name alias, Table<LabExamenHistEstadosRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabExamenHistEstados(Name alias, Table<LabExamenHistEstadosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_examen_hist_estados</code> table reference
     */
    public LabExamenHistEstados(String alias) {
        this(DSL.name(alias), LAB_EXAMEN_HIST_ESTADOS);
    }

    /**
     * Create an aliased <code>public.lab_examen_hist_estados</code> table reference
     */
    public LabExamenHistEstados(Name alias) {
        this(alias, LAB_EXAMEN_HIST_ESTADOS);
    }

    /**
     * Create a <code>public.lab_examen_hist_estados</code> table reference
     */
    public LabExamenHistEstados() {
        this(DSL.name("lab_examen_hist_estados"), null);
    }

    public <O extends Record> LabExamenHistEstados(Table<O> child, ForeignKey<O, LabExamenHistEstadosRecord> key) {
        super(child, key, LAB_EXAMEN_HIST_ESTADOS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<LabExamenHistEstadosRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabExamenHistEstadosRecord, ?>>asList(Keys.LAB_EXAMEN_HIST_ESTADOS__HIST_ESTADOS_EXAMEN_FK, Keys.LAB_EXAMEN_HIST_ESTADOS__HIST_ESTADOS_FROTE_FK, Keys.LAB_EXAMEN_HIST_ESTADOS__HIST_ESTADOS_BIOPSIA_FK);
    }

    private transient LabExamen _labExamen;
    private transient LabExamenFrote _labExamenFrote;
    private transient LabExamenBiopsia _labExamenBiopsia;

    public LabExamen labExamen() {
        if (_labExamen == null)
            _labExamen = new LabExamen(this, Keys.LAB_EXAMEN_HIST_ESTADOS__HIST_ESTADOS_EXAMEN_FK);

        return _labExamen;
    }

    public LabExamenFrote labExamenFrote() {
        if (_labExamenFrote == null)
            _labExamenFrote = new LabExamenFrote(this, Keys.LAB_EXAMEN_HIST_ESTADOS__HIST_ESTADOS_FROTE_FK);

        return _labExamenFrote;
    }

    public LabExamenBiopsia labExamenBiopsia() {
        if (_labExamenBiopsia == null)
            _labExamenBiopsia = new LabExamenBiopsia(this, Keys.LAB_EXAMEN_HIST_ESTADOS__HIST_ESTADOS_BIOPSIA_FK);

        return _labExamenBiopsia;
    }

    @Override
    public LabExamenHistEstados as(String alias) {
        return new LabExamenHistEstados(DSL.name(alias), this);
    }

    @Override
    public LabExamenHistEstados as(Name alias) {
        return new LabExamenHistEstados(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenHistEstados rename(String name) {
        return new LabExamenHistEstados(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabExamenHistEstados rename(Name name) {
        return new LabExamenHistEstados(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, String, LocalDate, String, String, LocalDate> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
