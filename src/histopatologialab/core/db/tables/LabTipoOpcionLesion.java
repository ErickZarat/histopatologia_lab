/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabTipoOpcionLesionRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabTipoOpcionLesion extends TableImpl<LabTipoOpcionLesionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_tipo_opcion_lesion</code>
     */
    public static final LabTipoOpcionLesion LAB_TIPO_OPCION_LESION = new LabTipoOpcionLesion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabTipoOpcionLesionRecord> getRecordType() {
        return LabTipoOpcionLesionRecord.class;
    }

    /**
     * The column <code>public.lab_tipo_opcion_lesion.cod_tipo_opcion_lesion</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, Integer> COD_TIPO_OPCION_LESION = createField(DSL.name("cod_tipo_opcion_lesion"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.nombre_tipo_opcion</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, String> NOMBRE_TIPO_OPCION = createField(DSL.name("nombre_tipo_opcion"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.valor_tipo_opcion</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, String> VALOR_TIPO_OPCION = createField(DSL.name("valor_tipo_opcion"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.estado_opcion_lesion</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, String> ESTADO_OPCION_LESION = createField(DSL.name("estado_opcion_lesion"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.fecha_creacion</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.creado_por</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.fecha_modificacion</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_tipo_opcion_lesion.modificado_por</code>.
     */
    public final TableField<LabTipoOpcionLesionRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR(20), this, "");

    private LabTipoOpcionLesion(Name alias, Table<LabTipoOpcionLesionRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabTipoOpcionLesion(Name alias, Table<LabTipoOpcionLesionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_tipo_opcion_lesion</code> table reference
     */
    public LabTipoOpcionLesion(String alias) {
        this(DSL.name(alias), LAB_TIPO_OPCION_LESION);
    }

    /**
     * Create an aliased <code>public.lab_tipo_opcion_lesion</code> table reference
     */
    public LabTipoOpcionLesion(Name alias) {
        this(alias, LAB_TIPO_OPCION_LESION);
    }

    /**
     * Create a <code>public.lab_tipo_opcion_lesion</code> table reference
     */
    public LabTipoOpcionLesion() {
        this(DSL.name("lab_tipo_opcion_lesion"), null);
    }

    public <O extends Record> LabTipoOpcionLesion(Table<O> child, ForeignKey<O, LabTipoOpcionLesionRecord> key) {
        super(child, key, LAB_TIPO_OPCION_LESION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabTipoOpcionLesionRecord, Integer> getIdentity() {
        return (Identity<LabTipoOpcionLesionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabTipoOpcionLesionRecord> getPrimaryKey() {
        return Keys.LAB_TIPO_OPCION_LESION_PKEY;
    }

    @Override
    public List<UniqueKey<LabTipoOpcionLesionRecord>> getKeys() {
        return Arrays.<UniqueKey<LabTipoOpcionLesionRecord>>asList(Keys.LAB_TIPO_OPCION_LESION_PKEY);
    }

    @Override
    public LabTipoOpcionLesion as(String alias) {
        return new LabTipoOpcionLesion(DSL.name(alias), this);
    }

    @Override
    public LabTipoOpcionLesion as(Name alias) {
        return new LabTipoOpcionLesion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabTipoOpcionLesion rename(String name) {
        return new LabTipoOpcionLesion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabTipoOpcionLesion rename(Name name) {
        return new LabTipoOpcionLesion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, LocalDate, String, LocalDate, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
