/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabMedicamentoRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabMedicamento extends TableImpl<LabMedicamentoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_medicamento</code>
     */
    public static final LabMedicamento LAB_MEDICAMENTO = new LabMedicamento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabMedicamentoRecord> getRecordType() {
        return LabMedicamentoRecord.class;
    }

    /**
     * The column <code>public.lab_medicamento.cod_medicamento</code>.
     */
    public final TableField<LabMedicamentoRecord, Integer> COD_MEDICAMENTO = createField(DSL.name("cod_medicamento"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lab_medicamento.nombre_medicamento</code>.
     */
    public final TableField<LabMedicamentoRecord, String> NOMBRE_MEDICAMENTO = createField(DSL.name("nombre_medicamento"), SQLDataType.VARCHAR(35).nullable(false), this, "");

    /**
     * The column <code>public.lab_medicamento.estado_medicamento</code>.
     */
    public final TableField<LabMedicamentoRecord, String> ESTADO_MEDICAMENTO = createField(DSL.name("estado_medicamento"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.lab_medicamento.fecha_creacion</code>.
     */
    public final TableField<LabMedicamentoRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_medicamento.creado_por</code>.
     */
    public final TableField<LabMedicamentoRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR(35), this, "");

    /**
     * The column <code>public.lab_medicamento.fecha_modificacion</code>.
     */
    public final TableField<LabMedicamentoRecord, LocalDate> FECHA_MODIFICACION = createField(DSL.name("fecha_modificacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_medicamento.modificado_por</code>.
     */
    public final TableField<LabMedicamentoRecord, String> MODIFICADO_POR = createField(DSL.name("modificado_por"), SQLDataType.VARCHAR(35), this, "");

    private LabMedicamento(Name alias, Table<LabMedicamentoRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabMedicamento(Name alias, Table<LabMedicamentoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_medicamento</code> table reference
     */
    public LabMedicamento(String alias) {
        this(DSL.name(alias), LAB_MEDICAMENTO);
    }

    /**
     * Create an aliased <code>public.lab_medicamento</code> table reference
     */
    public LabMedicamento(Name alias) {
        this(alias, LAB_MEDICAMENTO);
    }

    /**
     * Create a <code>public.lab_medicamento</code> table reference
     */
    public LabMedicamento() {
        this(DSL.name("lab_medicamento"), null);
    }

    public <O extends Record> LabMedicamento(Table<O> child, ForeignKey<O, LabMedicamentoRecord> key) {
        super(child, key, LAB_MEDICAMENTO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabMedicamentoRecord, Integer> getIdentity() {
        return (Identity<LabMedicamentoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabMedicamentoRecord> getPrimaryKey() {
        return Keys.LAB_MEDICAMENTO_PK;
    }

    @Override
    public List<UniqueKey<LabMedicamentoRecord>> getKeys() {
        return Arrays.<UniqueKey<LabMedicamentoRecord>>asList(Keys.LAB_MEDICAMENTO_PK);
    }

    @Override
    public LabMedicamento as(String alias) {
        return new LabMedicamento(DSL.name(alias), this);
    }

    @Override
    public LabMedicamento as(Name alias) {
        return new LabMedicamento(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabMedicamento rename(String name) {
        return new LabMedicamento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabMedicamento rename(Name name) {
        return new LabMedicamento(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, LocalDate, String, LocalDate, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
