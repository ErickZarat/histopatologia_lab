/*
 * This file is generated by jOOQ.
 */
package histopatologialab.core.db.tables;


import histopatologialab.core.db.Keys;
import histopatologialab.core.db.Public;
import histopatologialab.core.db.tables.records.LabRolFuncionRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LabRolFuncion extends TableImpl<LabRolFuncionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lab_rol_funcion</code>
     */
    public static final LabRolFuncion LAB_ROL_FUNCION = new LabRolFuncion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabRolFuncionRecord> getRecordType() {
        return LabRolFuncionRecord.class;
    }

    /**
     * The column <code>public.lab_rol_funcion.codigo_rol</code>.
     */
    public final TableField<LabRolFuncionRecord, Integer> CODIGO_ROL = createField(DSL.name("codigo_rol"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lab_rol_funcion.codigo_funcion</code>.
     */
    public final TableField<LabRolFuncionRecord, Integer> CODIGO_FUNCION = createField(DSL.name("codigo_funcion"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.lab_rol_funcion.fecha_creacion</code>.
     */
    public final TableField<LabRolFuncionRecord, LocalDate> FECHA_CREACION = createField(DSL.name("fecha_creacion"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lab_rol_funcion.creado_por</code>.
     */
    public final TableField<LabRolFuncionRecord, String> CREADO_POR = createField(DSL.name("creado_por"), SQLDataType.VARCHAR(30), this, "");

    private LabRolFuncion(Name alias, Table<LabRolFuncionRecord> aliased) {
        this(alias, aliased, null);
    }

    private LabRolFuncion(Name alias, Table<LabRolFuncionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lab_rol_funcion</code> table reference
     */
    public LabRolFuncion(String alias) {
        this(DSL.name(alias), LAB_ROL_FUNCION);
    }

    /**
     * Create an aliased <code>public.lab_rol_funcion</code> table reference
     */
    public LabRolFuncion(Name alias) {
        this(alias, LAB_ROL_FUNCION);
    }

    /**
     * Create a <code>public.lab_rol_funcion</code> table reference
     */
    public LabRolFuncion() {
        this(DSL.name("lab_rol_funcion"), null);
    }

    public <O extends Record> LabRolFuncion(Table<O> child, ForeignKey<O, LabRolFuncionRecord> key) {
        super(child, key, LAB_ROL_FUNCION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LabRolFuncionRecord> getPrimaryKey() {
        return Keys.LAB_ROL_FUNCION_PK;
    }

    @Override
    public List<UniqueKey<LabRolFuncionRecord>> getKeys() {
        return Arrays.<UniqueKey<LabRolFuncionRecord>>asList(Keys.LAB_ROL_FUNCION_PK);
    }

    @Override
    public List<ForeignKey<LabRolFuncionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LabRolFuncionRecord, ?>>asList(Keys.LAB_ROL_FUNCION__LAB_ROL_FUNCIONFK_COD_ROL, Keys.LAB_ROL_FUNCION__LAB_ROL_FUNCIONFK_COD_FUNCION);
    }

    private transient LabRol _labRol;
    private transient LabFuncion _labFuncion;

    public LabRol labRol() {
        if (_labRol == null)
            _labRol = new LabRol(this, Keys.LAB_ROL_FUNCION__LAB_ROL_FUNCIONFK_COD_ROL);

        return _labRol;
    }

    public LabFuncion labFuncion() {
        if (_labFuncion == null)
            _labFuncion = new LabFuncion(this, Keys.LAB_ROL_FUNCION__LAB_ROL_FUNCIONFK_COD_FUNCION);

        return _labFuncion;
    }

    @Override
    public LabRolFuncion as(String alias) {
        return new LabRolFuncion(DSL.name(alias), this);
    }

    @Override
    public LabRolFuncion as(Name alias) {
        return new LabRolFuncion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRolFuncion rename(String name) {
        return new LabRolFuncion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LabRolFuncion rename(Name name) {
        return new LabRolFuncion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDate, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
